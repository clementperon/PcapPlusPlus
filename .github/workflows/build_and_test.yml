name: Build and test
on: [push, pull_request]

env:
  BUILD_DIR: Dist

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  linux:
    runs-on: ubuntu-20.04
    container: seladb/${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: ubuntu2204
            python: python3
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR
          - image: ubuntu2004
            python: python3
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR
          - image: ubuntu2004
            python: python3
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR
            use_zstd: false
          - image: ubuntu1804
            python: python3.8
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR
          - image: centos7
            python: python3.8
            test-flags: --test-args="-s"
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR
          - image: fedora34
            python: python3
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR
          - image: alpine315
            python: python3
            configure: cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Configure PcapPlusPlus
        run: ${{ matrix.configure }}

      - name: Build PcapPlusPlus
        run: cmake --build $BUILD_DIR -j

      - name: Test PcapPlusPlus
        run: |
          ${{ matrix.python }} -m pip install -U pip
          ${{ matrix.python }} -m pip install -r ci/run_tests/requirements.txt
          ${{ matrix.python }} ci/run_tests/run_tests.py --interface eth0 ${{ matrix.test-flags }}

      - name: Test Examples
        run: |
          cd Tests/ExamplesTest
          ${{ matrix.python }} -m pip install -U pip
          ${{ matrix.python }} -m pip install -r requirements.txt
          ${{ matrix.python }} -m pytest --interface eth0

      - name: Check installation
        run: cmake --install $BUILD_DIR

      - name: Build Tutorials
        run: |
          mkdir -p build_examples
          cmake -S Examples -B build_examples
          cmake --build build_examples -j

      - name: Test Tutorials
        run: |
          # We need to execute the HelloWorld in the same folder as the PCAP file
          cp build_examples/Tutorials/Tutorial-HelloWorld/Tutorial-HelloWorld Examples/Tutorials/Tutorial-HelloWorld/
          cd Examples/Tutorials/Tutorial-HelloWorld && ./Tutorial-HelloWorld

  dpdk:
    runs-on: ubuntu-20.04
    container: seladb/${{ matrix.image }}
    strategy:
      matrix:
        image: [ubuntu2004-dpdk2111, ubuntu2004-dpdk2011, ubuntu2004-dpdk1911]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Configure PcapPlusPlus
        run: cmake -DPCAPPP_USE_DPDK=ON -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -S . -B $BUILD_DIR

      - name: Build PcapPlusPlus
        run: cmake --build $BUILD_DIR -j

      - name: Check AVX
        run: grep avx /proc/cpuinfo

      - name: Test Packet++
        run: |
          cd Tests/Packet++Test
          if [ -n "$(grep avx512 /proc/cpuinfo)" ]; then Bin/Packet++Test; else echo AVX-512 SUPPORT NOT FOUND, CANNOT RUN Packet++Test; fi

      - name: Test Pcap++
        run: |
          cd Tests/Pcap++Test
          if [ -n "$(grep avx512 /proc/cpuinfo)" ]; then Bin/Pcap++Test -n; else echo AVX-512 SUPPORT NOT FOUND, CANNOT RUN Pcap++Test; fi

  pfring:
    runs-on: ubuntu-20.04
    container: seladb/ubuntu2004-pfring
    strategy:
      matrix:
        include:
          - configure: cmake -DPCAPPP_USE_PF_RING=ON -DPF_RING_HOME="/PF_RING" -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -S . -B $BUILD_DIR

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Configure PcapPlusPlus
        run: ${{ matrix.configure }}

      - name: Build PcapPlusPlus
        run: cmake --build $BUILD_DIR -j

      - name: Test Packet++
        run: |
          cd Tests/Packet++Test
          Bin/Packet++Test

      - name: Test Pcap++
        run: |
          cd Tests/Pcap++Test
          Bin/Pcap++Test -n

  macos:
    runs-on: ${{ matrix.os-version }}
    strategy:
      matrix:
        os-version: [macos-11, macos-12]
        arch: [x86_64, arm64]
        use-zstd: [true, false]
        exclude:
          # excludes ZSTD on Arm64
          - arch: arm64
            use-zstd: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Configure PcapPlusPlus
        if: ${{ matrix.use-zstd != 'true' }}
        run: |
          cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -S . -B $BUILD_DIR

      - name: Configure PcapPlusPlus
        if: ${{ matrix.use-zstd == 'true' }}
        run: |
          cmake -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=ON -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -S . -B $BUILD_DIR

      - name: Build PcapPlusPlus
        run: cmake --build $BUILD_DIR -j

      - name: Check architecture
        run: lipo $BUILD_DIR/Pcap++/libPcap++.a -verify_arch ${{ matrix.arch }}

      - name: Install Tcpreplay
        run: brew install tcpreplay

      - name: Test PcapPlusPlus
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          python -m pip install -U pip
          python -m pip install -r ci/run_tests/requirements.txt
          python ci/run_tests/run_tests.py --interface en0 --use-sudo

      - name: Test Examples
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          cd Tests/ExamplesTest
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pytest --interface en0 --use-sudo

      - name: Check installation
        run: cmake --install $BUILD_DIR

      - name: Build Tutorials
        run: |
          mkdir -p build_examples
          cmake -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -S Examples -B build_examples
          cmake --build build_examples -j

      - name: Test Tutorials
        # We can't run cross compiled binaries
        if: ${{ matrix.arch == 'x86_64' }}
        run: |
          # We need to execute the HelloWorld in the same folder as the PCAP file
          cp build_examples/Tutorials/Tutorial-HelloWorld/Tutorial-HelloWorld Examples/Tutorials/Tutorial-HelloWorld/
          cd Examples/Tutorials/Tutorial-HelloWorld && ./Tutorial-HelloWorld

  mingw-w64:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - env: i686
            sys: mingw32
          - env: x86_64
            sys: mingw64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          install: >-
            git
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-gcc
            mingw-w64-${{matrix.env}}-make

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Install NPcap
        env:
          NPCAP_USERNAME: ${{ secrets.NPCAP_USERNAME }}
          NPCAP_PASSWORD: ${{ secrets.NPCAP_PASSWORD }}
        run: |
          ci\install_npcap.bat
          echo "PCAP_SDK_DIR=/C/Npcap-sdk" >> $env:GITHUB_ENV

      - name: Configure PcapPlusPlus
        shell: msys2 {0}
        run: |
          cmake -G "MinGW Makefiles" -DPacket_ROOT=/C/Npcap-sdk -DPCAP_ROOT=/C/Npcap-sdk -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DLIGHT_PCAPNG_ZSTD=OFF -S . -B $BUILD_DIR

      - name: Build PcapPlusPlus
        shell: msys2 {0}
        run: cmake --build $BUILD_DIR

      - name: Install tcpreplay
        run: ci\install_tcpreplay.bat

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -r ci\run_tests\requirements.txt
          python ci\run_tests\run_tests_windows.py

      - name: Test Examples
        run: |
          cd Tests\ExamplesTest
          python -m pip install -r requirements.txt
          python -m pytest

  visual-studio:
    strategy:
      matrix:
        os: [windows-2019, windows-2022]
        pcap_lib: [npcap, winpcap]
        arch: [Win32, x64]
        use_zstd: [false]
        include:
          - os: windows-2019
            platform: "Visual Studio 16 2019"
          - os: windows-2022
            platform: "Visual Studio 17 2022"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Install WinPcap
        run: |
          ci\install_winpcap.bat
          echo "PCAP_SDK_DIR=C:\WpdPack" >> $env:GITHUB_ENV
        if: matrix.pcap_lib == 'winpcap'

      - name: Install NPcap
        env:
          NPCAP_USERNAME: ${{ secrets.NPCAP_USERNAME }}
          NPCAP_PASSWORD: ${{ secrets.NPCAP_PASSWORD }}
        run: |
          ci\install_npcap.bat
          echo "PCAP_SDK_DIR=C:\Npcap-sdk" >> $env:GITHUB_ENV
        if: matrix.pcap_lib == 'npcap'

      - name: Set Zstd
        run: |
          ci\install_zstd.bat
          echo "ZSTD_HOME_PARAM=-z C:\zstd" >> $env:GITHUB_ENV
        if: matrix.use_zstd == true

      - name: Configure PcapPlusPlus
        run: cmake -A ${{ matrix.arch }} -G "${{ matrix.platform }}" -DPCAPPP_BUILD_EXAMPLES=ON -DPCAPPP_BUILD_TESTS=ON -DPCAP_ROOT=${{ env.PCAP_SDK_DIR }} -DPacket_ROOT=${{ env.PCAP_SDK_DIR }} -S . -B $env:BUILD_DIR

      - name: Build PcapPlusPlus
        run: cmake --build $env:BUILD_DIR -j

      - name: Install tcpreplay
        run: ci\install_tcpreplay.bat

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -r ci\run_tests\requirements.txt
          python ci\run_tests\run_tests_windows.py

      - name: Test Examples
        run: |
          move ".\Dist\examples_bin\Debug\*" ".\Dist\examples_bin\"
          cd Tests\ExamplesTest
          python -m pip install -r requirements.txt
          python -m pytest

  android:
    strategy:
      matrix:
        include:
          - run-on-os: ubuntu-20.04
            target: armeabi-v7a
            api-version: 30
          - run-on-os: ubuntu-20.04
            target: x86
            api-version: 30
          - run-on-os: macos-11
            target: arm64-v8a
            api-version: 30
          - run-on-os: macos-11
            target: x86_64
            api-version: 30

    runs-on: ${{ matrix.run-on-os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Configure PcapPlusPlus
        run: |
          NDK_ROOT=${ANDROID_SDK_ROOT}/ndk-bundle
          cmake -DCMAKE_TOOLCHAIN_FILE="${NDK_ROOT}/build/cmake/android.toolchain.cmake" -DANDROID_PLATFORM="${{ matrix.api-version}}" -DANDROID_ABI="${{ matrix.target }}" -S . -B $BUILD_DIR

      - name: Build PcapPlusPlus
        run: cmake --build $BUILD_DIR -j

      - name: Checkout ToyVpn-PcapPlusPlus
        uses: actions/checkout@master
        with:
          repository: seladb/ToyVpn-PcapPlusPlus
          path: ./ToyVpn-PcapPlusPlus
          submodules: true

      - name: Install locally PcapPlusPlus
        # CMake install library in $prefix/lib ToyVpn want $prefix/$target/$api-version
        run: |
          TOYVPN_PCAPPLUSPLUS="./ToyVpn-PcapPlusPlus/app/libs/pcapplusplus"
          PCAPPLUSPLUS_LIBS_PATH="$TOYVPN_PCAPPLUSPLUS/${{ matrix.target }}/${{ matrix.api-version }}"
          PCAPPLUSPLUS_INCLUDE_PATH="$TOYVPN_PCAPPLUSPLUS/include"
          cmake --install $BUILD_DIR --prefix ${TOYVPN_PCAPPLUSPLUS}
          mkdir -p ${PCAPPLUSPLUS_LIBS_PATH} ${PCAPPLUSPLUS_INCLUDE_PATH}
          mv ${TOYVPN_PCAPPLUSPLUS}/lib/libpcap++.a ${PCAPPLUSPLUS_LIBS_PATH}/libPcap++.a
          mv ${TOYVPN_PCAPPLUSPLUS}/lib/libpacket++.a ${PCAPPLUSPLUS_LIBS_PATH}/libPacket++.a
          mv ${TOYVPN_PCAPPLUSPLUS}/lib/libcommon++.a ${PCAPPLUSPLUS_LIBS_PATH}/libCommon++.a
          mv ${TOYVPN_PCAPPLUSPLUS}/include/pcapplusplus/*.h ${PCAPPLUSPLUS_INCLUDE_PATH}/

      - name: Build ToyVpn-PcapPlusPlus
        working-directory: ./ToyVpn-PcapPlusPlus
        run: |
          sed -i.bak "s|abiFilters.*$|abiFilters '${{ matrix.target }}'|g" app/build.gradle
          chmod +x gradlew
          ./gradlew assembleDebug
